// src/components/Calculator.js
import React, { useState, useCallback, useEffect } from 'react';
import { calculateGold } from '../logic/goldCalculator';
import './Calculator.css';

function Calculator() {
    const [lane, setLane] = useState('Mid');
    const [time, setTime] = useState(10);
    const [missRate, setMissRate] = useState(15);
    const [procRate, setProcRate] = useState(80);
    const [result, setResult] = useState(null);

    const handleCalculate = useCallback(() => {
        const calculationResult = calculateGold(lane, time, missRate, procRate);
        setResult(calculationResult);
    }, [lane, time, missRate, procRate]);

    useEffect(() => {
        handleCalculate();
    }, [handleCalculate]);

    return (
        <div className="card">
            <div className="input-form">
                <div className="input-group">
                    <label>–†–æ–ª—å:</label>
                    <div className="lane-selector">
                        <button onClick={() => setLane('Top')} className={lane === 'Top' ? 'active' : ''}>–¢–æ–ø</button>
                        <button onClick={() => setLane('Mid')} className={lane === 'Mid' ? 'active' : ''}>–ú–∏–¥</button>
                        <button onClick={() => setLane('Bot')} className={lane === 'Bot' ? 'active' : ''}>–ë–æ—Ç</button>
                        <button onClick={() => setLane('Support')} className={lane === 'Support' ? 'active' : ''}>–°–∞–ø–ø–æ—Ä—Ç</button>
                    </div>
                </div>

                <div className="input-group">
                    <label>–ú–∏–Ω—É—Ç–∞ –∏–≥—Ä—ã: {time}</label>
                    <input
                        type="range"
                        id="time-slider"
                        min="0"
                        max="40"
                        value={time}
                        onChange={(e) => setTime(Number(e.target.value))}
                        className="slider"
                    />
                </div>

                {lane !== 'Support' ? (
                    <div className="input-group">
                        <label>% –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø–æ–≤: {missRate}%</label>
                        <input type="range" min="0" max="100" value={missRate} onChange={(e) => setMissRate(Number(e.target.value))} className="slider"/>
                    </div>
                ) : (
                    <div className="input-group">
                        <label>% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞—Ä—è–¥–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–∞: {procRate}%</label>
                        <input type="range" min="0" max="100" value={procRate} onChange={(e) => setProcRate(Number(e.target.value))} className="slider" />
                    </div>
                )}
            </div>

            {result && (
                <div className="results-display">
                    {result.lane === 'Support' ? (
                        <>
                            <div className="results-summary extended">
                                <div><span>–° –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø—Ä–æ–∫–∏)</span><p className="gold-text">{result.procGold}g</p></div>
                                <div><span>–° –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–∞—Å—Å–∏–≤)</span><p className="gold-text">{result.itemBonusPassiveGold}g</p></div>
                                <div><span>–ü–∞—Å—Å–∏–≤–Ω–æ (–æ–±—â–∏–π)</span><p className="gold-text">{result.passiveGold}g</p></div>
                            </div>
                            <div className="total-gold-banner">
                                <span>–í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞</span>
                                <p className="gold-text total">{result.grandTotalGold}g</p>
                            </div>
                            <div className="kill-equivalent">
                                <span>–≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ <strong>~{(result.grandTotalGold / 300).toFixed(1)}</strong> —É–±–∏–π—Å—Ç–≤–∞–º üíÄ</span>
                            </div>
                            {/* === –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –í–ê–†–î–û–í === */}
                            <div className="ward-equivalent">
                                <span>(–∏–ª–∏ <strong>~{(result.grandTotalGold / 75).toFixed(0)}</strong> –ü–∏–Ω–∫–æ–≤ üò≠)</span>
                            </div>
                        </>
                    ) : (
                        <>
                            <div className="results-summary extended">
                                <div><span>–° —Ñ–∞—Ä–º–∞</span><p className="gold-text">{result.totalGold}g</p></div>
                                <div><span>–ü–∞—Å—Å–∏–≤–Ω–æ</span><p className="gold-text">{result.passiveGold}g</p></div>
                                <div><span>–í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞</span><p className="gold-text total">{result.grandTotalGold}g</p></div>
                            </div>
                            <div className="kill-equivalent">
                                <span>–≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ <strong>~{(result.grandTotalGold / 300).toFixed(1)}</strong> —É–±–∏–π—Å—Ç–≤–∞–º üíÄ</span>
                            </div>
                            <div className="results-details">
                                <p>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞—Ä–º–∞:</p>
                                <p>–í—Å–µ–≥–æ —É–±–∏—Ç–æ –º–∏–Ω—å–æ–Ω–æ–≤: <strong>{result.totalFarmed}</strong> –∏–∑ {result.maxTotal}</p>
                                <div className="detail-row">
                                    <span>–ú–∏–ª–∏–∫–∏:</span>
                                    <span>{result.details.melee.farmed} / {result.details.melee.max} (+{result.details.melee.gold}g)</span>
                                </div>
                                <div className="detail-row">
                                    <span>–†–µ–Ω–¥–∂–∏:</span>
                                    <span>{result.details.caster.farmed} / {result.details.caster.max} (+{result.details.caster.gold}g)</span>
                                </div>
                                <div className="detail-row">
                                    <span>–¢–µ–ª–µ–≥–∏:</span>
                                    <span>{result.details.siege.farmed} / {result.details.siege.max} (+{result.details.siege.gold}g)</span>
                                </div>
                            </div>
                        </>
                    )}
                </div>
            )}
        </div>
    );
}

export default Calculator;