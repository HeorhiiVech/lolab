// src/components/Calculator.js
import React, { useState, useCallback, useEffect } from 'react';
import { calculateGold } from '../logic/goldCalculator';
import './Calculator.css';

function Calculator() {
    const [lane, setLane] = useState('Mid');
    const [time, setTime] = useState(10);
    const [missRate, setMissRate] = useState(15);
    const [result, setResult] = useState(null);

    const handleCalculate = useCallback(() => {
        const calculationResult = calculateGold(lane, time, missRate);
        setResult(calculationResult);
    }, [lane, time, missRate]);

    useEffect(() => {
        handleCalculate();
    }, [handleCalculate]);

    return (
        <div className="card">
            <div className="input-form">
                <div className="input-group">
                    <label>–õ–∏–Ω–∏—è:</label>
                    <div className="lane-selector">
                        <button onClick={() => setLane('Top')} className={lane === 'Top' ? 'active' : ''}>–¢–æ–ø</button>
                        <button onClick={() => setLane('Mid')} className={lane === 'Mid' ? 'active' : ''}>–ú–∏–¥</button>
                        <button onClick={() => setLane('Bot')} className={lane === 'Bot' ? 'active' : ''}>–ë–æ—Ç</button>
                    </div>
                </div>

                <div className="input-group">
                    <label htmlFor="time-slider">–ú–∏–Ω—É—Ç–∞ —Ñ–∞—Ä–º–∞: {time}</label>
                    <input
                        type="range"
                        id="time-slider"
                        min="2"
                        max="40"
                        value={time}
                        onChange={(e) => setTime(Number(e.target.value))}
                        className="slider"
                    />
                </div>
                <div className="input-group">
                    <label htmlFor="miss-rate-slider">% –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø–æ–≤: {missRate}%</label>
                    <input
                        type="range"
                        id="miss-rate-slider"
                        min="0"
                        max="100"
                        value={missRate}
                        onChange={(e) => setMissRate(Number(e.target.value))}
                        className="slider"
                    />
                </div>
                {/* –ö–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å" –±—ã–ª–∞ –∑–¥–µ—Å—å. –ú—ã –µ–µ —É–¥–∞–ª–∏–ª–∏. */}
            </div>

            {result && (
                <div className="results-display">
                    <div className="results-summary">
                        <div>
                            <span>–í—Å–µ–≥–æ —É–±–∏—Ç–æ</span>
                            <p>{result.totalFarmed} / {result.maxTotal}</p>
                        </div>
                        <div>
                            <span>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–æ–ª–æ—Ç–∞</span>
                            <p className="gold-text">{result.totalGold}g</p>
                        </div>
                    </div>
                    <div className="kill-equivalent">
                        <span>–≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ <strong>~{(result.totalGold / 300).toFixed(1)}</strong> —É–±–∏–π—Å—Ç–≤–∞–º üíÄ</span>
                    </div>
                    <div className="results-details">
                        <p>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</p>
                        <div className="detail-row">
                            <span>–ú–∏–ª–∏–∫–∏:</span>
                            <span>{result.details.melee.farmed} / {result.details.melee.max} (+{result.details.melee.gold}g)</span>
                        </div>
                        <div className="detail-row">
                            <span>–†–µ–Ω–∂–∏:</span>
                            <span>{result.details.caster.farmed} / {result.details.caster.max} (+{result.details.caster.gold}g)</span>
                        </div>
                        <div className="detail-row">
                            <span>–¢–µ–ª–µ–≥–∏:</span>
                            <span>{result.details.siege.farmed} / {result.details.siege.max} (+{result.details.siege.gold}g)</span>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}

export default Calculator;